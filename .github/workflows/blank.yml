name: CI

on:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      
      - name: Run on architecture
        uses: uraimo/run-on-arch-action@v2.1.1
        with:
          # CPU architecture: armv6, armv7, aarch64, s390x, ppc64le.
          arch: aarch64
          # Linux distribution name: ubuntu16.04, ubuntu18.04, ubuntu20.04, bullseye, buster, stretch, jessie, fedora_latest, alpine_latest, archarm_latest.
          distro: ubuntu20.04
          # Shell commands to execute in the container.
          run: touch test/file
          # The shell to run commands with in the container. Default: /bin/sh on alpine (because Alpine uses BusyBox), /bin/bash for other distros.
          shell: /bin/sh
          # Additional arguments to pass to docker run, such as volume mappings. See README for example usage.
          dockerRunArgs: --volume "${PWD}/test:/test"
          # Shell commands to execute on the host before running the container, such as creating directories for volume mappings. See README for example usage.
          setup: mkdir test 
          # Shell commands to execute in the container as part of docker build, such as installing dependencies. This speeds up subsequent builds if githubToken is also used, but note that the image layer will be publicly available in your projects GitHub Package Registry, so make sure the resulting image does not have any secrets cached in logs or state.
          install: apt update
      - name: Run
        run: ls test/
